Problem Description

Given a string A made up of multiple brackets of type "[]" , "()" and "{}" find the length of the longest substring which forms a balanced string .

Conditions for a string to be balanced :

Blank string is balanced ( However blank string will not be provided as a test case ).
If B is balanced : (B) , [B] and {B} are also balanced.
If B1 and B2 are balanced then B1B2 i.e the string formed by concatenating B1 and B2 is also balanced.


Problem Constraints
0 <= |A| <= 106

============================================================================================================================================================

-- Mayank Bhadani

public class Solution {
    public int LBSlength(final String A) {
        
        int len = A.length();
        
        int[] dp = new int[len];
        int max = 0;
        
        for(int i = 1 ; i < len ; i++)
        {
            if( A.charAt(i) == '(' || A.charAt(i) == '{' || A.charAt(i) == '[' )
            {
                dp[i] = 0;
            }
            else
            {
                if( A.charAt(i) == ')' )
                {
                    if( A.charAt( i - 1 ) == '(' )
                    {
                        dp[i] =  2 + ( ( i - 2 ) >= 0 ? dp[i - 2] : 0 );
                    }
                    else
                    {
                        dp[i] = i - dp[i - 1] - 1 >= 0 && dp[i - 1] > 0 ? ( A.charAt(i - dp[i - 1] - 1) == '(' ? dp[i - 1] + 2 : 0 ) : 0; 
                        
                        dp[i] = dp[i] + ( i - dp[i - 1] - 2 >= 0 && dp[i - 1] > 0 && dp[i] > 0 ? dp[i - dp[i - 1] - 2] : 0  );
    
                    }
                }
                
                if( A.charAt(i) == '}' )
                {
                    if( A.charAt( i - 1 ) == '{' )
                    {
                        dp[i] =  2 + ( ( i - 2 ) >= 0 ? dp[i - 2] : 0 );
                    }
                    else
                    {
                        dp[i] = i - dp[i - 1] - 1  >= 0 && dp[i - 1] > 0  ? ( A.charAt(i - dp[i - 1] - 1) == '{' ? dp[i - 1] + 2 : 0 ) : 0; 
                        
                        dp[i] = dp[i] + ( i - dp[i - 1] - 2 >= 0 && dp[i - 1] > 0 && dp[i] > 0 ? dp[i - dp[i - 1] - 2] : 0  );
    
                    }
                }
                
                if( A.charAt(i) == ']' )
                {
                    if( A.charAt( i - 1 ) == '[' )
                    {
                        dp[i] =  2 + ( ( i - 2 ) >= 0 ? dp[i - 2] : 0 );
                    }
                    else
                    {
                        dp[i] = i - dp[i - 1] - 1  >= 0 && dp[i - 1] > 0 ? ( A.charAt(i - dp[i - 1] - 1) == '[' ? dp[i - 1] + 2 : 0 ) : 0; 
                        
                        dp[i] = dp[i] + ( i - dp[i - 1] - 2 >= 0 && dp[i - 1] > 0 && dp[i] > 0 ? dp[i - dp[i - 1] - 2] : 0  );
    
                    }
                }
            }
            
            if( max < dp[i] )
            {
                max = dp[i];
            }
        }
        
        return max;
    }
}
